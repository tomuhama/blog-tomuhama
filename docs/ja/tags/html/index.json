[{"content":"概要 LaTeXで書いてて困ったりわかんなかったりそらんじられなかったりしたことをメモしておく場所。\n特殊文字    表示 記法     \\ \\textbackslash   ① \\textcircled{\\scriptsize 1}    メモ ①についてはkn1cht氏1が言及していた\\usepackage{otf}の\\ajMaru{1}を使うほうがよさそう。\nsection内に数式が入る場合 sectionとかsubsection内に数式を$$で入れると警告文が出てくる。例えば、\\section{$E=MC^2$}と書くと次の警告文が発生する。\nPackage hyperrefWarning: Token not allowed in a PDF string (PDFDocEncoding):(hyperref) removing これは、pdfのしおり機能がTeXで組まれておらず、普通の文字列で表現する必要があるかららしい2。そのため、数式などの表現を入れるとエラーが出てしまう(Tokenは無理ダヨーと言われてる)。そんな時に使えるのが\\texorpdfstring。\\texorpdfstringは、\\hyperrefに組み込まれたマクロで、pdfのしおりに渡す文字列とTeXに渡すトークンをそれぞれ別にする書き方ができる。\n1  \\texorpdfstring{TeXに渡すトークン列}{PDFに渡す文字列}   このようにすることで、警告文を回避できる。\nさっきの例だと、\\section{\\texorpdfstring{$E=MC^2$}{E=MC2}}のようにしておく。ちなみにOverleafで書いて適当にpdfにしたけど普通に\\texorpdfstringしなくてもそのまま表現はしてくれたししおり機能も動いてた。内部でどうなってるのかは知らない。\nその他参考にしたサイト34\n目次の階層表示 修論書いてた時に気になった。デフォルトだと(たぶん)sectionくらいまでしか表示されなかったけど、見栄え微妙だな～と思って直したくて調べた。次のようにすれば深さを設定できる5。\n1 2  \\setcounter{tocdepth}{n} \\tableofcontents   nの大きさで深さが決定される。\n   n 表示     0 \\chapterのみ   1 \\sectionまで   2 \\subsectionまで   3 \\subsubsectionまで    sectionの深さを増やす 研究室で輪読を行っているときにsubsubsubsectionが欲しくなったので調べた。完全に次のサイトで提案されている書き方のコピペ6。\n1 2 3 4 5 6 7 8  \\makeatletter \\newcommand{\\subsubsubsection}{\\@startsection{paragraph}{4}{\\z@}%  {1.0\\Cvs \\@plus.5\\Cdp \\@minus.2\\Cdp}%  {.1\\Cvs \\@plus.3\\Cdp}%  {\\reset@font\\sffamily\\normalsize} } \\makeatother \\setcounter{secnumdepth}{4}    学振特別研究員申請のための科研費LaTeX Tips\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hyperref - Token not allowed [duplicate]\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n LaTeXでPDF出力する際のTips その2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n hyperref/提供されるコマンド\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n texの\\tableofcontentsで表示させる階層の深さを変更する\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \\paragraphをsubsubsubsectionに拡張する\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"自分用のLaTeXのメモです。","id":0,"section":"posts","tags":["latex"],"title":"LaTeXのメモ","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/latex/"},{"content":"概要 Linuxコマンドに一向に慣れないので覚えるため・わかんなくなった時にすぐに参照できるようにメモしておく場所。あと普通に知らなかったことも書いておく。主にMITの授業1を読んで知ったことを書いてる。これはイチから使い方を教えるタイプの文章ではないので悪しからず。\nシェバン(shebang) 今までずっと雰囲気で使っていたので知らなかった。計算投げる時のファイルの冒頭の\n#!で始まる文のこと。シェバンは実行したときにどういうスクリプト言語で処理するかを指定する文言。つまり\n1 2 3  #!/bin/bash  echo $PATH   とすると、このファイルをbashで実行するという意味になる。このファイルを\n1  ./path.sh   とすると、bash path.shと同じように実行してくれる。シェバンはbashに限らずpythonなどでもできるが、人々のpythonのbinの位置は異なるので、envを使う。\n1  #!/usr/bin/env python   このようにすると、下のほうのコードがpythonで実行される。envは各々の環境変数の中の特定のアプリケーションの場所を教えてくれて、そのまま実行してくれる。\ntldr tldrは\u0026quot;Too Long. Did\u0026rsquo;t read.\u0026ldquo;の略。何かしらのコマンドの使い方が分からなくなった場合、--helpやmanコマンドを使えば一応は知ることができるが、非常に長くてその場ですぐ知って使いたいという場合には不便。そこで便利なのがtldrコマンド。これは言葉の意味通り「(長くて読んでられないので)短くまとまった説明を与える」コマンド。実際に使った結果が次。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  $ tldr grep grep Find patterns in files using regular expressions.More information: https://man7.org/linux/man-pages/man1/grep.1.html. - Search for a pattern within a file: grep \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search for an exact string (disables regular expressions): grep --fixed-strings \u0026#34;{{exact_string}}\u0026#34; {{path/to/file}} - Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files: grep --recursive --line-number --binary-files={{without-match}} \u0026#34;{{search_pattern}}\u0026#34; {{path/to/directory}} - Use extended regular expressions (supports ?, +, {}, () and |), in case-insensitive mode: grep --extended-regexp --ignore-case \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Print 3 lines of context around, before, or after each match: grep --{{context|before-context|after-context}}={{3}} \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Print file name and line number for each match: grep --with-filename --line-number \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search for lines matching a pattern, printing only the matched text: grep --only-matching \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search stdin for lines that do not match a pattern: cat {{path/to/file}} | grep --invert-match \u0026#34;{{search_pattern}}\u0026#34;   便利～。ハイフン(-)でつなげることで、subcommandにも使える。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  $ tldr git-diff git diff Show changes to tracked files.More information: https://git-scm.com/docs/git-diff. - Show unstaged, uncommitted changes: git diff - Show all uncommitted changes (including staged ones): git diff HEAD - Show only staged (added, but not yet committed) changes: git diff --staged - Show changes from all commits since a given date/time (a date expression, e.g. \u0026#34;1 week 2 days\u0026#34; or an ISO date): git diff \u0026#39;HEAD@{3 months|weeks|days|hours|seconds ago}\u0026#39; - Show only names of changed files since a given commit: git diff --name-only {{commit}} - Output a summary of file creations, renames and mode changes since a given commit: git diff --summary {{commit}} - Compare a single file between two branches or commits: git diff {{branch_1}}..{{branch_2}} [--] {{path/to/file}} - Compare different files from the current branch to other branch: git diff {{branch}}:{{path/to/file2}} {{path/to/file}}   ワイルドカード *.pyみたいなやつのこと。?と*の2タイプがあり、それぞれ異なる振る舞いをする。たとえばいま、foo1、foo2、foo10、barという4つのファイルがあったとき、?と*を使うと次のようにふるまう。\n1 2 3 4 5  $ ls foo1 foo2 foo10 bar $ rm foo? $ ls foo10 bar   1 2 3 4 5  $ ls foo1 foo2 foo10 bar $ rm foo* $ ls bar   ?は1文字指定のワイルドカードであり、*は全て指定するワイルドカード。\nコマンドライン上での画像の可視化 1  display test.jpg   画像の拡張子の変換 1 2 3 4 5  convert test.png test.jpg # もしくは、次のようにも書ける convert test.{png,jpg}   \u0026lsquo;と\u0026quot;の違い 1 2 3 4  foo=bar echo $foo echo \u0026#34;$foo\u0026#34; echo \u0026#39;$foo\u0026#39;   文字色で分かる通り、\u0026lsquo;\u0026lsquo;で囲まれた部分はリテラルの文字列なので、$fooと表示される。他はbarと表示される。\n特別な変数  $0：スクリプト名 $1から$9：スクリプトに渡される引数。$1は一番目の引数で、以下同様。 $@：全ての引数 $#：引数の総数 $?：直前のコマンドのリターンコード !!：引数を含む直前のコマンド全体。よくあるパターンは権限がなかっただけでコマンドを実行できなかったときで、sudo !!と打てばそのコマンドをsudoで速やかに再実行できる。 $_：直前のコマンドの最後の引数。もしインタラクティブシェルを使っているなら、$_を使わずとも、Escからの.と打てばすぐにこの値を取得できる。   The Missing Semester of Your CS Education\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"自分用のLinuxコマンドなどのメモです。","id":1,"section":"posts","tags":["linux"],"title":"Linuxのメモ","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/linux/"},{"content":" MathJax.Hub.Config({ tex2jax: { inlineMath: [['$', '$'] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ] } });  概要 Materials Projectの概要は次。これら12から引用。\n 物質材料の第一原理計算結果のデータベース。結晶構造、バンド構造、熱力学量、相図、磁気モーメントなどを提供する。MITの研究グループが運営を行っており、Li電池材料のデータが特に充実している。ウェブベースのユーザーインタフェースに加えて、httpベースのAPIも提供されており、ユーザ独自のスクリーニングが可能。無料であるが、要登録。\n 元々、Materials Projectは2011年にアメリカで始まったプロジェクトMaterials Genome Initiative(MGI)の一環で生まれたデータベース。沢山のデータを用いてハイスループットに(言葉の使い方あってるのか？)材料探索を行うことが期待されている。AFLOWもMGIの一環。pymatgenは、Python Materials Genomicsの略で、Materials API(Materials ProjectのAPI)を利用して簡単に材料データを取得することを可能にするPythonパッケージ。その他にも色々できるが今回は省略。詳しくは論文3を読もう！\n登録 登録しなくても引っ張ってこれる情報はあるが、当然物足りないので登録して沢山情報を持ってこれるようにする。\n 普通に登録する。公式サイトのLoginのところから登録できる。 登録ができたらここを開く。意味わからん文字列があるのでそれがAPI KEYです。  使い方 pymatgenをインストールしてない人はpipでインストール。\n1  pip install pymatgen   まず、登録したAPI_KEYを使ってMPResterのオブジェクトを作成。\n1 2 3 4  from pymatgen import MPRester MY_API_KEY=\u0026#34;API_KEY\u0026#34; mp = MPRester(MY_API_KEY)   と思ったけど書き方変わったみたいでキレてる。普通に先月くらいまではこの書き方でちゃんと動いてたんですけどねぇ\u0026hellip;(2021/06/01現在)。次のように書きます。\n1 2 3 4  from pymatgen.ext.matproj import MPRester MY_API_KEY=\u0026#34;API_KEY\u0026#34; mp = MPRester(MY_API_KEY)   あとはmpを使って適宜呼び出し。様々に呼び出せる方法はあるが、最も簡易的な、番号から呼び出す方法を書く。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026gt;\u0026gt;\u0026gt; structure = mp.get_structure_by_material_id(\u0026#34;mp-1143\u0026#34;) \u0026gt;\u0026gt;\u0026gt; print(structure) Full Formula (Al4 O6) Reduced Formula: Al2O3 abc : 5.177955 5.177955 5.177955 angles: 55.289612 55.289612 55.289616 Sites (10) # SP a b c magmom --- ---- -------- -------- -------- -------- 0 Al 0.147904 0.147904 0.147904 0 1 Al 0.352096 0.352096 0.352096 0 2 Al 0.647904 0.647904 0.647904 0 3 Al 0.852096 0.852096 0.852096 0 4 O 0.556146 0.943854 0.25 -0 5 O 0.75 0.443854 0.056146 -0 6 O 0.25 0.556146 0.943854 -0 7 O 0.943854 0.25 0.556146 -0 8 O 0.056146 0.75 0.443854 -0 9 O 0.443854 0.056146 0.75 -0   これでstructureが取り出せる。ここでは$\\textrm{Al}_2\\textrm{O}_3$をとってきた。structureだけでも結構な情報がとってこれる。dir(structure)で調べればわかるが、superlatticeを作れたりもするし、replace methodを使えば特定の元素を別の元素に交換できる。\n構造以外の情報を引き出すためには、次のように書く。\n1  Al2O3 = mp.query(criteria={\u0026#34;element\u0026#34;:{\u0026#34;task_id\u0026#34;:\u0026#34;mp-1143\u0026#34;}}, properties=[\u0026#34;band_gap\u0026#34;, \u0026#34;cif\u0026#34;, \u0026#34;elasticity\u0026#34;])   と思ったけどこっちも書き方かわったんですね\u0026hellip;\u0026quot;element\u0026quot;の部分が必要でなくなったみたい。\n1  Al2O3 = mp.query(criteria={\u0026#34;task_id\u0026#34;:\u0026#34;mp-1143\u0026#34;}, properties=[\u0026#34;band_gap\u0026#34;, \u0026#34;cif\u0026#34;, \u0026#34;elasticity\u0026#34;])   criteriaでは材料の条件を指定する。ここではtask_idで指定したが、例えば「O元素を2つ含む構造」など指定して情報を取り出すこともできる。structureはデフォルトで引き出せるので問題ない。また、propertiesは取得したい物性を指定する。propertiesで引数にできる値はここに全て載っている。今回の場合は、バンドギャップやcifファイルの形式、elasticityの情報を含んだオブジェクトが作られる。ちなみにprintすると直接情報が入ったリストが出てくる。\nちなみにAl2O3はこうなってる。今回は1つしかないが、criteriaに複数の材料が当てはまる場合はそれぞれの情報がdict型で返ってくる。\n1 2 3  [{\u0026#39;band_gap\u0026#39;: 6.043599999999999, \u0026#39;cif\u0026#39;: \u0026#34;# generated using pymatgen\\ndata_Al2O3\\n_symmetry_space_group_name_H-M \u0026#39;P 1\u0026#39;\\n_cell_length_a 5.17795525\\n_cell_length_b 5.17795525\\n_cell_length_c 5.17795522\\n_cell_angle_alpha 55.28961179\\n_cell_angle_beta 55.28961179\\n_cell_angle_gamma 55.28961598\\n_symmetry_Int_Tables_number 1\\n_chemical_formula_structural Al2O3\\n_chemical_formula_sum \u0026#39;Al4 O6\u0026#39;\\n_cell_volume 87.42003700\\n_cell_formula_units_Z 2\\nloop_\\n_symmetry_equiv_pos_site_id\\n_symmetry_equiv_pos_as_xyz\\n1 \u0026#39;x, y, z\u0026#39;\\nloop_\\n_atom_site_type_symbol\\n_atom_site_label\\n_atom_site_symmetry_multiplicity\\n_atom_site_fract_x\\n_atom_site_fract_y\\n_atom_site_fract_z\\n_atom_site_occupancy\\nAl Al0 1 0.14790400 0.14790400 0.14790400 1\\nAl Al1 1 0.35209600 0.35209600 0.35209600 1\\nAl Al2 1 0.64790400 0.64790400 0.64790400 1\\nAl Al3 1 0.85209600 0.85209600 0.85209600 1\\nO O4 1 0.55614600 0.94385400 0.25000000 1\\nO O5 1 0.75000000 0.44385400 0.05614600 1\\nO O6 1 0.25000000 0.55614600 0.94385400 1\\nO O7 1 0.94385400 0.25000000 0.55614600 1\\nO O8 1 0.05614600 0.75000000 0.44385400 1\\nO O9 1 0.44385400 0.05614600 0.75000000 1\\n\u0026#34;, \u0026#39;elasticity\u0026#39;: {\u0026#39;G_Reuss\u0026#39;: 145.0, \u0026#39;G_VRH\u0026#39;: 147.0, \u0026#39;G_Voigt\u0026#39;: 149.0, \u0026#39;G_Voigt_Reuss_Hill\u0026#39;: 147.0, \u0026#39;K_Reuss\u0026#39;: 232.0, \u0026#39;K_VRH\u0026#39;: 232.0, \u0026#39;K_Voigt\u0026#39;: 232.0, \u0026#39;K_Voigt_Reuss_Hill\u0026#39;: 232.0, \u0026#39;elastic_anisotropy\u0026#39;: 0.16, \u0026#39;elastic_tensor\u0026#39;: [[452.0, 150.0, 107.0, 20.0, 0.0, 0.0], [150.0, 452.0, 107.0, -20.0, 0.0, 0.0], [107.0, 107.0, 454.0, 0.0, 0.0, 0.0], [20.0, -20.0, 0.0, 132.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 132.0, 20.0], [0.0, 0.0, 0.0, 0.0, 20.0, 151.0]], \u0026#39;homogeneous_poisson\u0026#39;: 0.24, \u0026#39;poisson_ratio\u0026#39;: 0.24, \u0026#39;universal_anisotropy\u0026#39;: 0.16, \u0026#39;elastic_tensor_original\u0026#39;: [[452.88438075058264, 149.32230924280603, 107.84796496254714, -20.10675793699231, 0.0, 0.0], [148.62120151839645, 453.5170195225491, 107.90847433611715, 20.173114161264873, 0.0, 0.0], [106.9405661066039, 106.94049665460224, 454.3703632383968, 0.0, 0.0, 0.0], [-20.86619534535896, 19.832316552076684, -0.17929756761829355, 131.71960640208465, 0.0, 0.0], [-0.0013251095003368445, -0.015841534176974235, -0.0003537556433960988, 0.012846932839122636, 131.7651980776287, -20.304943009508005], [-1.4040031587713696e-05, -1.1880019661839212e-05, 2.6599853168491205e-06, -1.9746683263811934e-05, -20.3341646730955, 149.8292238793223]], \u0026#39;compliance_tensor\u0026#39;: [[2.6, -0.8, -0.4, -0.5, -0.0, -0.0], [-0.8, 2.6, -0.4, 0.5, 0.0, -0.0], [-0.4, -0.4, 2.4, -0.0, -0.0, 0.0], [-0.5, 0.5, -0.0, 7.8, -0.0, 0.0], [-0.0, 0.0, -0.0, -0.0, 7.8, -1.0], [-0.0, -0.0, 0.0, 0.0, -1.0, 6.8]], \u0026#39;warnings\u0026#39;: [], \u0026#39;nsites\u0026#39;: 10}}]   最後に.cifで保存してVestaで見てみる。\n1 2  with open(\u0026#34;al2o3.cif\u0026#34;, \u0026#34;r\u0026#34;) as f: f.write(Al2O3[0][\u0026#34;cif\u0026#34;])   終わり。こういう感じでしか使ったことないけどフォノンバンドとかも取得できるし相図も引っ張ってこれるらしいので次回以降(あるのか？)やる。\n pymatgenを使ったMaterials Projectのデータ収集\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Materials Projectのクエリ機能を使用して所望の計算材料データを大量に取得する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Python Materials Genomics (pymatgen): A robust, open-source python library for materials analysis\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"Materials Projectのデータをpymatgenを用いて引っ張ってきたい時に","id":2,"section":"posts","tags":["pymatgen","materials informatics"],"title":"pymatgenの使い方(1)","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/pymatgen/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode  Code tabs Make it easy to switch between different code\njava javascript  1  System.out.println(\u0026#39;Hello World!\u0026#39;);     1  console.log(\u0026#39;Hello World!\u0026#39;);       'use strict'; var containerId = JSON.parse(\"\\\"d96f892eb0443615\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Tabs for general purpose Windows MacOS Ubuntu  Windows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n MacOS section Hello world!  Ubuntu section Great!    'use strict'; var containerId = JSON.parse(\"\\\"0fa06ef53ae6dc58\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  Expand   Expand me  Title contents     Expand me2  Title2 contents2   Alert Colored box\nthis is a text this is a text this is a text this is a text Notice success text  info text  warning text  error text  ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":3,"section":"posts","tags":["shortcode"],"title":"Shortcodes","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/shortcodes/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":4,"section":"posts","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/markdown-syntax/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"A brief description of Hugo Shortcodes","id":5,"section":"posts","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/rich-content/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECTcolumn_name,column_nameFROMtable_name;  Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":6,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/syntax-highlight/"},{"content":"We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544)  Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n","description":"A brief guide to setup KaTeX","id":7,"section":"posts","tags":null,"title":"Math Typesetting","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/math-typesetting/"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"Guide to emoji usage in Hugo","id":8,"section":"posts","tags":["emoji","gamoji","namoji","bamoji","amoji"],"title":"Emoji Support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/emoji-support/"},{"content":"digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":9,"section":"posts","tags":[""],"title":"Viz support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-viz/"},{"content":"{ \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":10,"section":"posts","tags":[""],"title":"Wavedrom support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-wavedrom/"},{"content":"{ \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":11,"section":"posts","tags":[""],"title":"Chart support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":12,"section":"posts","tags":[""],"title":"JS Sequence Diagram support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":13,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":14,"section":"posts","tags":[""],"title":"MathJax support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":15,"section":"posts","tags":[""],"title":"Katex support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":16,"section":"posts","tags":[""],"title":"Flowchart support","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/test-flowchart/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":17,"section":"","tags":null,"title":"About","uri":"https://tomuhama.github.io/blog-tomuhama/ja/about/"}]