[{"content":" MathJax.Hub.Config({ tex2jax: { inlineMath: [['$', '$'] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ] } });  概要 Materials Projectの概要は次。これら12から引用。\n 物質材料の第一原理計算結果のデータベース。結晶構造、バンド構造、熱力学量、相図、磁気モーメントなどを提供する。MITの研究グループが運営を行っており、Li電池材料のデータが特に充実している。ウェブベースのユーザーインタフェースに加えて、httpベースのAPIも提供されており、ユーザ独自のスクリーニングが可能。無料であるが、要登録。\n 元々、Materials Projectは2011年にアメリカで始まったプロジェクトMaterials Genome Initiative(MGI)の一環で生まれたデータベース。沢山のデータを用いてハイスループットに(言葉の使い方あってるのか？)材料探索を行うことが期待されている。AFLOWもMGIの一環。pymatgenは、Python Materials Genomicsの略で、Materials API(Materials ProjectのAPI)を利用して簡単に材料データを取得することを可能にするPythonパッケージ。その他にも色々できるが今回は省略。詳しくは論文3を読もう！\n登録 登録しなくても引っ張ってこれる情報はあるが、当然物足りないので登録して沢山情報を持ってこれるようにする。\n 普通に登録する。公式サイトのLoginのところから登録できる。 登録ができたらここを開く。意味わからん文字列があるのでそれがAPI KEYです。  使い方 pymatgenをインストールしてない人はpipでインストール。今回は最近出たver2021.2.8.1についての説明。\n1  pip install pymatgen   まず、登録したAPI_KEYを使ってMPResterのオブジェクトを作成。\n1 2 3 4  from pymatgen import MPRester MY_API_KEY=\u0026#34;API_KEY\u0026#34; mp = MPRester(MY_API_KEY)   と思ったけど書き方変わったみたいでキレてる。普通に先月くらいまではこの書き方でちゃんと動いてたんですけどねぇ\u0026hellip;(2021/06/01現在)。次のように書きます。\n1 2 3 4  from pymatgen.ext.matproj import MPRester MY_API_KEY=\u0026#34;API_KEY\u0026#34; mp = MPRester(MY_API_KEY)   あとはmpを使って適宜呼び出し。様々に呼び出せる方法はあるが、最も簡易的な、番号から呼び出す方法を書く。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026gt;\u0026gt;\u0026gt; structure = mp.get_structure_by_material_id(\u0026#34;mp-1143\u0026#34;) \u0026gt;\u0026gt;\u0026gt; print(structure) Full Formula (Al4 O6) Reduced Formula: Al2O3 abc : 5.177955 5.177955 5.177955 angles: 55.289612 55.289612 55.289616 Sites (10) # SP a b c magmom --- ---- -------- -------- -------- -------- 0 Al 0.147904 0.147904 0.147904 0 1 Al 0.352096 0.352096 0.352096 0 2 Al 0.647904 0.647904 0.647904 0 3 Al 0.852096 0.852096 0.852096 0 4 O 0.556146 0.943854 0.25 -0 5 O 0.75 0.443854 0.056146 -0 6 O 0.25 0.556146 0.943854 -0 7 O 0.943854 0.25 0.556146 -0 8 O 0.056146 0.75 0.443854 -0 9 O 0.443854 0.056146 0.75 -0   これでstructureが取り出せる。ここでは$\\textrm{Al}_2\\textrm{O}_3$をとってきた。structureだけでも結構な情報がとってこれる。dir(structure)で調べればわかるが、superlatticeを作れたりもするし、replace methodを使えば特定の元素を別の元素に交換できる。\n構造以外の情報を引き出すためには、次のように書く。\n1  Al2O3 = mp.query(criteria={\u0026#34;element\u0026#34;:{\u0026#34;task_id\u0026#34;:\u0026#34;mp-1143\u0026#34;}}, properties=[\u0026#34;band_gap\u0026#34;, \u0026#34;cif\u0026#34;, \u0026#34;elasticity\u0026#34;])   と思ったけどこっちも書き方かわったんですね\u0026hellip;\u0026quot;element\u0026quot;の部分が必要でなくなったみたい。\n1  Al2O3 = mp.query(criteria={\u0026#34;task_id\u0026#34;:\u0026#34;mp-1143\u0026#34;}, properties=[\u0026#34;band_gap\u0026#34;, \u0026#34;cif\u0026#34;, \u0026#34;elasticity\u0026#34;])   criteriaでは材料の条件を指定する。ここではtask_idで指定したが、例えば「O元素を2つ含む構造」など指定して情報を取り出すこともできる。structureはデフォルトで引き出せるので問題ない。また、propertiesは取得したい物性を指定する。propertiesで引数にできる値はここに全て載っている。今回の場合は、バンドギャップやcifファイルの形式、elasticityの情報を含んだオブジェクトが作られる。ちなみにprintすると直接情報が入ったリストが出てくる。\nちなみにAl2O3はこうなってる。今回は1つしかないが、criteriaに複数の材料が当てはまる場合はそれぞれの情報がdict型で返ってくる。\n1 2 3  [{\u0026#39;band_gap\u0026#39;: 6.043599999999999, \u0026#39;cif\u0026#39;: \u0026#34;# generated using pymatgen\\ndata_Al2O3\\n_symmetry_space_group_name_H-M \u0026#39;P 1\u0026#39;\\n_cell_length_a 5.17795525\\n_cell_length_b 5.17795525\\n_cell_length_c 5.17795522\\n_cell_angle_alpha 55.28961179\\n_cell_angle_beta 55.28961179\\n_cell_angle_gamma 55.28961598\\n_symmetry_Int_Tables_number 1\\n_chemical_formula_structural Al2O3\\n_chemical_formula_sum \u0026#39;Al4 O6\u0026#39;\\n_cell_volume 87.42003700\\n_cell_formula_units_Z 2\\nloop_\\n_symmetry_equiv_pos_site_id\\n_symmetry_equiv_pos_as_xyz\\n1 \u0026#39;x, y, z\u0026#39;\\nloop_\\n_atom_site_type_symbol\\n_atom_site_label\\n_atom_site_symmetry_multiplicity\\n_atom_site_fract_x\\n_atom_site_fract_y\\n_atom_site_fract_z\\n_atom_site_occupancy\\nAl Al0 1 0.14790400 0.14790400 0.14790400 1\\nAl Al1 1 0.35209600 0.35209600 0.35209600 1\\nAl Al2 1 0.64790400 0.64790400 0.64790400 1\\nAl Al3 1 0.85209600 0.85209600 0.85209600 1\\nO O4 1 0.55614600 0.94385400 0.25000000 1\\nO O5 1 0.75000000 0.44385400 0.05614600 1\\nO O6 1 0.25000000 0.55614600 0.94385400 1\\nO O7 1 0.94385400 0.25000000 0.55614600 1\\nO O8 1 0.05614600 0.75000000 0.44385400 1\\nO O9 1 0.44385400 0.05614600 0.75000000 1\\n\u0026#34;, \u0026#39;elasticity\u0026#39;: {\u0026#39;G_Reuss\u0026#39;: 145.0, \u0026#39;G_VRH\u0026#39;: 147.0, \u0026#39;G_Voigt\u0026#39;: 149.0, \u0026#39;G_Voigt_Reuss_Hill\u0026#39;: 147.0, \u0026#39;K_Reuss\u0026#39;: 232.0, \u0026#39;K_VRH\u0026#39;: 232.0, \u0026#39;K_Voigt\u0026#39;: 232.0, \u0026#39;K_Voigt_Reuss_Hill\u0026#39;: 232.0, \u0026#39;elastic_anisotropy\u0026#39;: 0.16, \u0026#39;elastic_tensor\u0026#39;: [[452.0, 150.0, 107.0, 20.0, 0.0, 0.0], [150.0, 452.0, 107.0, -20.0, 0.0, 0.0], [107.0, 107.0, 454.0, 0.0, 0.0, 0.0], [20.0, -20.0, 0.0, 132.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 132.0, 20.0], [0.0, 0.0, 0.0, 0.0, 20.0, 151.0]], \u0026#39;homogeneous_poisson\u0026#39;: 0.24, \u0026#39;poisson_ratio\u0026#39;: 0.24, \u0026#39;universal_anisotropy\u0026#39;: 0.16, \u0026#39;elastic_tensor_original\u0026#39;: [[452.88438075058264, 149.32230924280603, 107.84796496254714, -20.10675793699231, 0.0, 0.0], [148.62120151839645, 453.5170195225491, 107.90847433611715, 20.173114161264873, 0.0, 0.0], [106.9405661066039, 106.94049665460224, 454.3703632383968, 0.0, 0.0, 0.0], [-20.86619534535896, 19.832316552076684, -0.17929756761829355, 131.71960640208465, 0.0, 0.0], [-0.0013251095003368445, -0.015841534176974235, -0.0003537556433960988, 0.012846932839122636, 131.7651980776287, -20.304943009508005], [-1.4040031587713696e-05, -1.1880019661839212e-05, 2.6599853168491205e-06, -1.9746683263811934e-05, -20.3341646730955, 149.8292238793223]], \u0026#39;compliance_tensor\u0026#39;: [[2.6, -0.8, -0.4, -0.5, -0.0, -0.0], [-0.8, 2.6, -0.4, 0.5, 0.0, -0.0], [-0.4, -0.4, 2.4, -0.0, -0.0, 0.0], [-0.5, 0.5, -0.0, 7.8, -0.0, 0.0], [-0.0, 0.0, -0.0, -0.0, 7.8, -1.0], [-0.0, -0.0, 0.0, 0.0, -1.0, 6.8]], \u0026#39;warnings\u0026#39;: [], \u0026#39;nsites\u0026#39;: 10}}]   最後に.cifで保存してVesta4で見てみる。\n1 2  with open(\u0026#34;al2o3.cif\u0026#34;, \u0026#34;r\u0026#34;) as f: f.write(Al2O3[0][\u0026#34;cif\u0026#34;])   終わり。こういう感じでしか使ったことないけどフォノンバンドとかも取得できるし相図も引っ張ってこれるらしいので次回以降(あるのか？)やる。\n pymatgenを使ったMaterials Projectのデータ収集\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Materials Projectのクエリ機能を使用して所望の計算材料データを大量に取得する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Python Materials Genomics (pymatgen): A robust, open-source python library for materials analysis\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n K. Momma and F. Izumi, \u0026ldquo;VESTA 3 for three-dimensional visualization of crystal, volumetric and morphology data,\u0026rdquo; J. Appl. Crystallogr., 44, 1272-1276 (2011).\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"Materials Projectのデータをpymatgenを用いて引っ張ってきたい時に","id":0,"section":"posts","tags":["pymatgen","materials informatics"],"title":"pymatgenの使い方(1)","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/pymatgen/"},{"content":"百合姫に載りました はい。\n経緯 自分の所属している東京大学百合愛好会に百合姫のコラム『百合好きの本屋さん』の依頼が来ました。このコラムは、全国の書店店員さんなどオススメの百合作品や、百合好きになったキッカケを伺ってみました！というコンセプトで、毎月色んな人が百合漫画(主に最近のおススメ作品)についてオタク語りしてくれてます。弊愛好会は本屋さんでもなんでもないけど大丈夫だろうか？と思ったけどここ最近のこのコーナー割と本屋さん以外の人が寄稿してたし(Vtuberさんも寄稿してた)、まぁいいみたいです。愛好会に来たので別に自分が書かなくてもよかったけれど、「載りて～、百合姫」と思って立候補して書いた。\n内容 買ってください。コミック百合姫を。コミック百合姫 2021年5月号\nゆりひめピクシブで連載している(もうすぐ終わる)『今日はまだフツーになれない』について書いてます。色々言いたかったけど短くて結構削らざるを得なかった。執筆にあたって、雰囲気を掴むために過去の百合姫の同コーナーを全部読んでみたりした。結構多くの人が熱量オタク語りをしていて、自分には難しい\u0026hellip;と思って結局ちょっとだけ強い言葉を出して全体的に静かな感じにした。この記事の執筆直前まで修論を書いていて、ノリと勢いと強い単語がふんだんに使われた文章が書けなくなっていたというのもあり、結構難産だった。あまり満足はしていないが、自分の中で感じている作品の魅力は言語化できたので良いものになってると思う。\n今更の報告ですが、よろしくお願いします。kindleならすぐ手に入ると思うので買って読んでください。\n","description":"百合姫2021年5月号にコラムを寄稿した話","id":1,"section":"posts","tags":["日常","百合"],"title":"百合姫に載った","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/yurihime_2021_05/"},{"content":"読んだ本 なめらかな世界と、その敵 読んだ。はんなれんさんの処女作。いくつかの短編が集まっている。表題作の『なめらかな世界と、その敵』が面白かった。冒頭、『雪国』を彷彿とさせる一人称視点で雪の降る景色を眺めるところから始まる。彷彿とさせるというか流石にオマージュだと思う。読み進めていくと、文中で何度も頭に「？」を思い浮かべたり文章を戻って読み直したりする。一人称視点故に世界への説明が少ない状態で、読者視点で不思議な光景をありのまま受け取らざるを得なくて、その仕組みが後半明らかになっていくとなるほどおもしれ～になる。\nまだ全ては読み終わっていない　。\n目々盛君には敵わない TSF漫画なので気になって買った。TSFの魅力や醍醐味を語れるほどTSFには詳しくないので偉そうなことは言えないが、個人的にTSFで好きなのは容姿が変化することで周囲の自分への接し方が変化したり周囲のその反応の変化によりTSFした主人公から見える世界も変わってくる、その変化の描き方で、本作の場合そういった描写はそんなに多くないと感じた。主人公の性別が変わったことに皆驚くけれど、主人公は元々容姿も性格もカッコいい人物であったようで、性別変わっても所謂ただのイケメン美少女になっただけで関係性自体が大きく変化しているような感じはなかった。「まぁ、主人公可愛いほうが嬉しいか\u0026hellip;」という感情で読んでた。\n「読む」ってどんなこと？ NHK出版の教育的？な本。「読む」という行為について学校教育で習うことから始まり、学校教育では読まない文章へと進んでいく。その流れの中で、「社会」や、学校で習う「読む」行為そのものを「読む」ことを行う。この部分が主眼で、「社会」や「共同体」から離れたところにある「個人」の貴さについて書いてたりする。ふだん本を読まないので、「読む」行為そのものについて色々学べた。というか小学校の範囲ですら知らなかったのヤバないか自分。\nアネモネは熱を帯びる 表紙の絵が綺麗だな、という第一印象。本文も綺麗。高校受験に失敗した主人公である大槻凪紗が入学した高校で、その失敗した原因である子、小宮山茉白と出会う、という話。主人公はポジティブであろうとするので、その原因となる子を見るたびに嫌な気持ちになる自分を嫌悪し、その子を好きになろうと努めるという内容。正直ここのモチベーションが理解しにくかったので読み進める際に躓いてしまった。原因と言ってるが茉白さんが倒れてるところを助けたのは自分の判断だしそんな嫌になるか\u0026hellip;？というのもあるし、茉白を見て嫌になってしまう自分が嫌だから今の自分を肯定するために茉白を好きになろうとする、というのも「？」になってしまった。まわりくどって思った。でもこれは自分が一般百合漫画に慣れすぎて手癖で読もうとしてる悪癖でもあると反省した。いやでもちょっと理解しにくかった\u0026hellip;。それはそれとして漫画として読みやすく、画面づくりや文字の配置も見やすいので漫画上手いな～となる。あと、「好きになる理由を探す」というのが少しポストやが君時代の作品っぽさを感じる。出会って、好きになって、色々あって付き合う・特別な関係を築くもしくは既に特別な関係になった二人を描く、のではなく、どういう過程で人は1人の人間を好きになるのか、を丁寧に描こうとしている気がする。おそらく、過ごしてきた時間で、その人の色々な面を知ってゆき、自然と隣にいることが自分の中で当然のような存在になってゆき、あるときこれが好きなのかと気付くという流れになるのではないかと思う。というか1巻にして既にそういう展開をやっているのでたぶんそう(1巻の終わりで「嫌じゃない」と感じる自分に気付く、という演出をやっている)。自分は正直やが君もこの好きになる過程を描くことについてはそこまで上手くいったかというとおそらくそうでもない(わかりやすさとかの点で)と思っているので、アネモネが1巻ごとに(もしくはある程度の巻数の経過ごとに)ポイントを用意してどれくらいこの子のことを好きになっているか？と確認する作業が明示的に入るなら、それはかなりわかりやすくなるのではないだろうか、と思う。これからのことは知らんけど。でも欲を言うともう少し何か足らないような気がするので(俺の理解度と感受性が悪い可能性が高い)、これは再読が必要かな～と思ってる。\nブルーピリオド 面白すぎる。10巻のよたすけ君の話が辛かった。再読しないと色々言えないなと思った。何者でもない人が「何者か」になるまでを描くんだろうなと思いながら読んでる。「何者でもない」っていうのはこの漫画の言葉を使うなら「透明」なんだろうなと思う。「透明」でない状態は色々な要素で構成されてるからちゃんと言葉にできてないけど、それは「好き」なものがあるとか「情熱」のようなものなんだろうなと思う。でも曖昧で月並みな感想なのでもう少しちゃんと読みたい。\nさよならじゃねーよ、ばか。 あきやま先生の短編集。犬の話とかは同人誌で持ってたし知ってる話はいくつかあった。Twitterに載ってる漫画が多かった。本当に絵がキュートで最高だなと思った。ゾンビの話は好きだった。\n君と綴るうたかた 1巻の時点ではまだ何もわからない。でも朝香夏織とかいう女が怖すぎることはわかる。基本的に主人公の星川雫目線で進んでいるため、クラスの人気者！みたいな雰囲気の朝香夏織が急に絡んできてコワ～みたいな感じで序盤は話が進む。これは自分の完全な気持ちであるが、星川がこそこそ書いてた小説を拾って目の前で許可なく持っていく失礼かつデリカシーの無い朝香夏織にまともな感受性とクラスでやっていく社交性があるっぽいの普通に恐怖でしかない。1巻を最後まで読めば色々と事情はありそうだとわかるが急に自宅を特定して押しかけてくるのも含めて怖すぎる。1話冒頭の未来？の描写はウーパールーパーのぬいぐるみがあるあたり朝香なのかな？と思うが彼女が小説を書く理由もわからないので色々謎が多い。とりあえず今後に期待。\n積んだ本 世界のニュースがわかる！地政学入門 珈琲の世界史 NHK100分de名著 ルソー 社会契約論 ファスト\u0026amp;フロー 三体 日本の地政学 ヒトラーとナチ・ドイツ 虎鶫 私の嫌いなおともだち ","description":"今月読んだ漫画・小説","id":2,"section":"posts","tags":["日常","漫画","小説"],"title":"読んだ本","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/books_202106/"},{"content":"とむはまです。姫でギャルです。\nicon : https://picrew.me/image_maker/268253\nTwitter : https://twitter.com/tomu__hama\nなの君が作った今日のウンメェ : https://shindanmaker.com/940334\n","description":"自己紹介","id":3,"section":"","tags":null,"title":"About","uri":"https://tomuhama.github.io/blog-tomuhama/ja/about/"},{"content":"概要 LaTeXで書いてて困ったりわかんなかったりそらんじられなかったりしたことをメモしておく場所。\n特殊文字    表示 記法     \\ \\textbackslash   ① \\textcircled{\\scriptsize 1}    メモ ①についてはkn1cht氏1が言及していた\\usepackage{otf}の\\ajMaru{1}を使うほうがよさそう。\nsection内に数式が入る場合 sectionとかsubsection内に数式を$$で入れると警告文が出てくる。例えば、\\section{$E=MC^2$}と書くと次の警告文が発生する。\nPackage hyperrefWarning: Token not allowed in a PDF string (PDFDocEncoding):(hyperref) removing これは、pdfのしおり機能がTeXで組まれておらず、普通の文字列で表現する必要があるかららしい2。そのため、数式などの表現を入れるとエラーが出てしまう(Tokenは無理ダヨーと言われてる)。そんな時に使えるのが\\texorpdfstring。\\texorpdfstringは、\\hyperrefに組み込まれたマクロで、pdfのしおりに渡す文字列とTeXに渡すトークンをそれぞれ別にする書き方ができる。\n1  \\texorpdfstring{TeXに渡すトークン列}{PDFに渡す文字列}   このようにすることで、警告文を回避できる。\nさっきの例だと、\\section{\\texorpdfstring{$E=MC^2$}{E=MC2}}のようにしておく。ちなみにOverleafで書いて適当にpdfにしたけど普通に\\texorpdfstringしなくてもそのまま表現はしてくれたししおり機能も動いてた。内部でどうなってるのかは知らない。\nその他参考にしたサイト34\n目次の階層表示 修論書いてた時に気になった。デフォルトだと(たぶん)sectionくらいまでしか表示されなかったけど、見栄え微妙だな～と思って直したくて調べた。次のようにすれば深さを設定できる5。\n1 2  \\setcounter{tocdepth}{n} \\tableofcontents   nの大きさで深さが決定される。\n   n 表示     0 \\chapterのみ   1 \\sectionまで   2 \\subsectionまで   3 \\subsubsectionまで    sectionの深さを増やす 研究室で輪読を行っているときにsubsubsubsectionが欲しくなったので調べた。完全に次のサイトで提案されている書き方のコピペ6。\n1 2 3 4 5 6 7 8  \\makeatletter \\newcommand{\\subsubsubsection}{\\@startsection{paragraph}{4}{\\z@}%  {1.0\\Cvs \\@plus.5\\Cdp \\@minus.2\\Cdp}%  {.1\\Cvs \\@plus.3\\Cdp}%  {\\reset@font\\sffamily\\normalsize} } \\makeatother \\setcounter{secnumdepth}{4}    学振特別研究員申請のための科研費LaTeX Tips\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Hyperref - Token not allowed [duplicate]\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n LaTeXでPDF出力する際のTips その2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n hyperref/提供されるコマンド\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n texの\\tableofcontentsで表示させる階層の深さを変更する\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n \\paragraphをsubsubsubsectionに拡張する\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"自分用のLaTeXのメモです。","id":4,"section":"posts","tags":["latex"],"title":"LaTeXのメモ","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/latex/"},{"content":"概要 Linuxコマンドに一向に慣れないので覚えるため・わかんなくなった時にすぐに参照できるようにメモしておく場所。あと普通に知らなかったことも書いておく。主にMITの授業1を読んで知ったことを書いてる。これはイチから使い方を教えるタイプの文章ではないので悪しからず。\nシェバン(shebang) 今までずっと雰囲気で使っていたので知らなかった。計算投げる時のファイルの冒頭の\n#!で始まる文のこと。シェバンは実行したときにどういうスクリプト言語で処理するかを指定する文言。つまり\n1 2 3  #!/bin/bash  echo $PATH   とすると、このファイルをbashで実行するという意味になる。このファイルを\n1  ./path.sh   とすると、bash path.shと同じように実行してくれる。シェバンはbashに限らずpythonなどでもできるが、人々のpythonのbinの位置は異なるので、envを使う。\n1  #!/usr/bin/env python   このようにすると、下のほうのコードがpythonで実行される。envは各々の環境変数の中の特定のアプリケーションの場所を教えてくれて、そのまま実行してくれる。\ntldr tldrは\u0026quot;Too Long. Did\u0026rsquo;t read.\u0026ldquo;の略。何かしらのコマンドの使い方が分からなくなった場合、--helpやmanコマンドを使えば一応は知ることができるが、非常に長くてその場ですぐ知って使いたいという場合には不便。そこで便利なのがtldrコマンド。これは言葉の意味通り「(長くて読んでられないので)短くまとまった説明を与える」コマンド。実際に使った結果が次。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  $ tldr grep grep Find patterns in files using regular expressions.More information: https://man7.org/linux/man-pages/man1/grep.1.html. - Search for a pattern within a file: grep \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search for an exact string (disables regular expressions): grep --fixed-strings \u0026#34;{{exact_string}}\u0026#34; {{path/to/file}} - Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files: grep --recursive --line-number --binary-files={{without-match}} \u0026#34;{{search_pattern}}\u0026#34; {{path/to/directory}} - Use extended regular expressions (supports ?, +, {}, () and |), in case-insensitive mode: grep --extended-regexp --ignore-case \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Print 3 lines of context around, before, or after each match: grep --{{context|before-context|after-context}}={{3}} \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Print file name and line number for each match: grep --with-filename --line-number \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search for lines matching a pattern, printing only the matched text: grep --only-matching \u0026#34;{{search_pattern}}\u0026#34; {{path/to/file}} - Search stdin for lines that do not match a pattern: cat {{path/to/file}} | grep --invert-match \u0026#34;{{search_pattern}}\u0026#34;   便利～。ハイフン(-)でつなげることで、subcommandにも使える。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  $ tldr git-diff git diff Show changes to tracked files.More information: https://git-scm.com/docs/git-diff. - Show unstaged, uncommitted changes: git diff - Show all uncommitted changes (including staged ones): git diff HEAD - Show only staged (added, but not yet committed) changes: git diff --staged - Show changes from all commits since a given date/time (a date expression, e.g. \u0026#34;1 week 2 days\u0026#34; or an ISO date): git diff \u0026#39;HEAD@{3 months|weeks|days|hours|seconds ago}\u0026#39; - Show only names of changed files since a given commit: git diff --name-only {{commit}} - Output a summary of file creations, renames and mode changes since a given commit: git diff --summary {{commit}} - Compare a single file between two branches or commits: git diff {{branch_1}}..{{branch_2}} [--] {{path/to/file}} - Compare different files from the current branch to other branch: git diff {{branch}}:{{path/to/file2}} {{path/to/file}}   ワイルドカード *.pyみたいなやつのこと。?と*の2タイプがあり、それぞれ異なる振る舞いをする。たとえばいま、foo1、foo2、foo10、barという4つのファイルがあったとき、?と*を使うと次のようにふるまう。\n1 2 3 4 5  $ ls foo1 foo2 foo10 bar $ rm foo? $ ls foo10 bar   1 2 3 4 5  $ ls foo1 foo2 foo10 bar $ rm foo* $ ls bar   ?は1文字指定のワイルドカードであり、*は全て指定するワイルドカード。\nコマンドライン上での画像の可視化 1  display test.jpg   画像の拡張子の変換 1 2 3 4 5  convert test.png test.jpg # もしくは、次のようにも書ける convert test.{png,jpg}   \u0026lsquo;と\u0026quot;の違い 1 2 3 4  foo=bar echo $foo echo \u0026#34;$foo\u0026#34; echo \u0026#39;$foo\u0026#39;   文字色で分かる通り、\u0026lsquo;\u0026lsquo;で囲まれた部分はリテラルの文字列なので、$fooと表示される。他はbarと表示される。\n特別な変数  $0：スクリプト名 $1から$9：スクリプトに渡される引数。$1は一番目の引数で、以下同様。 $@：全ての引数 $#：引数の総数 $?：直前のコマンドのリターンコード !!：引数を含む直前のコマンド全体。よくあるパターンは権限がなかっただけでコマンドを実行できなかったときで、sudo !!と打てばそのコマンドをsudoで速やかに再実行できる。 $_：直前のコマンドの最後の引数。もしインタラクティブシェルを使っているなら、$_を使わずとも、Escからの.と打てばすぐにこの値を取得できる。  scp configにサーバーが登録してある場合。\n サーバーからローカルに移動  1  scp server_name:/home/tomuhama/hosii.file /path/to/local/    ローカルからサーバーへアップロード  1  scp /path/to/local/okuru_file server_name:/home/tomuhama/   もしディレクトリを送る場合はscp -r\n The Missing Semester of Your CS Education\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"自分用のLinuxコマンドなどのメモです。","id":5,"section":"posts","tags":["linux"],"title":"Linuxのメモ","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/linux/"},{"content":"概要 自分用のメモです。\nobjectの保存について pickleでやる方法が有名だけどpandasでやったほうが書き方が簡単だったので覚えておく1．\n pickleでやった例  1 2 3 4 5 6  import pickle with open(\u0026#34;obj_data.pkl\u0026#34;, \u0026#34;wb\u0026#34;) as f: pickle.dump(obj_data, f) with open(\u0026#34;obj_data.pkl\u0026#34;, \u0026#34;rb\u0026#34;) as f: obj_data = pickle.load(f)    pandasでやった例  1 2 3 4  import pandas as pd pd.to_pickle(obj_data, \u0026#34;obj_data.pkl\u0026#34;) obj_data = pd.read_pickle(\u0026#34;obj_data.pkl\u0026#34;)    joblibでやった例  1 2 3 4  import joblib joblib.dump(obj_data, \u0026#34;obj_data.jb\u0026#34;, compress=3) obj_data=joblib.load(\u0026#34;obj_data.jb\u0026#34;)   joblibでやるとファイルサイズが小さくできる。compressは0から9までとれる。数字が大きいほどサイズの圧縮率が高い。\n pickleより楽にpythonオブジェクトを保存する方法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":"自分用のPythonのメモです。","id":6,"section":"posts","tags":["python"],"title":"Pythonのメモ","uri":"https://tomuhama.github.io/blog-tomuhama/ja/posts/python/"}]